version: 2.1

orbs:
  win: circleci/windows@5.0 # 使用 Windows orb
  python: circleci/python@2.0 # 使用 Python orb

jobs:
  build:
    executor: win/default # 使用 Windows orb 提供的默认 executor
    steps:
      - checkout # 对应 actions/checkout@v4

      - python/install-packages: # 对应 actions/setup-python@v4 和 Install dependencies
          pkg-manager: pip
          # 如果有 requirements.txt 文件，可以省略 args，它会自动查找
          # 否则，需要在这里指定要安装的包
          # 例如：args: "nuitka==2.7.10 pyside6==6.9.1 requests"
          # 或者，为了清晰，可以拆分成多个 run 步骤
      - run:
          name: Install Nuitka and other dependencies
          command: |
            pip install --upgrade pip
            pip install nuitka==2.7.10 pyside6==6.9.1 requests

      - run:
          name: Build with Nuitka
          # 注意：在 Windows 环境下，PowerShell 是默认 shell，可以直接使用 PowerShell 语法
          # 如果需要使用 cmd.exe 或 bash.exe，可以在 run 步骤中指定 shell
          command: |
            nuitka --standalone --onefile --enable-plugin=pyside6 --windows-console-mode=disable --windows-icon-from-ico=icon.ico --include-data-files="app.exe=app.exe" --include-data-files="icon.ico=icon.ico" --lto=yes --assume-yes-for-downloads activation_ui.py
            # 在 PowerShell 中，检查上一个命令的退出码可以使用 $LASTEXITCODE
            if ($LASTEXITCODE -ne 0) { exit 1 }

      - store_artifacts: # 对应 actions/upload-artifact@v4
          path: activation_ui.exe
          destination: activation_ui # Artifacts 的名称

workflows:
  build_workflow: # 工作流名称
    jobs:
      - build: # 这里的 'build' 是作业名称，后面跟着冒号，表示它是一个键
          filters: # 'filters' 是 'build' 作业的配置，与 'build' 对齐
            branches:
              only:
                - main
            paths:
              - "app.exe"
